<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.7.2 on win32)" generated="20190527 22:00:41.993" rpa="false">
<suite id="s1" name="Spectral Enable Radio" source="E:\learn\robot\FSS_TEST\spectral_enable_radio\spectral_enable_radio.robot">
<test id="s1-t1" name="fss_auto_testï¼š(no) spectral enable radio x">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ruijie</arg>
</arguments>
<assign>
<var>${Password}</var>
</assign>
<msg timestamp="20190527 22:00:42.058" level="INFO">${Password} = ruijie</msg>
<status status="PASS" starttime="20190527 22:00:42.058" endtime="20190527 22:00:42.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>en</arg>
</arguments>
<assign>
<var>${Password_op}</var>
</assign>
<msg timestamp="20190527 22:00:42.059" level="INFO">${Password_op} = en</msg>
<status status="PASS" starttime="20190527 22:00:42.059" endtime="20190527 22:00:42.060"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>apdebug</arg>
</arguments>
<assign>
<var>${Password1}</var>
</assign>
<msg timestamp="20190527 22:00:42.061" level="INFO">${Password1} = apdebug</msg>
<status status="PASS" starttime="20190527 22:00:42.060" endtime="20190527 22:00:42.061"></status>
</kw>
<kw name="Open Connection" library="Telnet">
<doc>Opens a new Telnet connection to the given host and port.</doc>
<arguments>
<arg>host=${AC_IP}</arg>
<arg>port=${AC_PORT}</arg>
</arguments>
<msg timestamp="20190527 22:00:42.062" level="INFO">Opening connection to 172.30.103.194:23 with prompt: (&gt;|#|:)$ (regexp)</msg>
<status status="PASS" starttime="20190527 22:00:42.061" endtime="20190527 22:00:42.070"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<msg timestamp="20190527 22:00:42.499" level="INFO">WS5308#</msg>
<status status="PASS" starttime="20190527 22:00:42.070" endtime="20190527 22:00:42.500"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>show ap-config summary | i ${AP_NAME}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:42.521" level="INFO">show ap-config summary | i AP740-I-newFlash</msg>
<msg timestamp="20190527 22:00:42.731" level="INFO">========= show ap status =========
Radio: Radio ID or Band: 2.4G = 1#, 5G = 2#
       E = enabled, D = disabled, N = Not exist, V = Virtual AP
       Current Sta number
       Channel: * = Global
       Power Level = Percent

Online AP number:</msg>
<msg timestamp="20190527 22:00:42.731" level="INFO">${output} = ========= show ap status =========
Radio: Radio ID or Band: 2.4G = 1#, 5G = 2#
       E = enabled, D = disabled, N = Not exist, V = Virtual AP
       Current Sta number
       Channel: * = Global...</msg>
<status status="PASS" starttime="20190527 22:00:42.502" endtime="20190527 22:00:42.731"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.733" endtime="20190527 22:00:42.734"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:42.739" level="INFO">1
Offline AP number: 12

AP Name                                  IP Address      Mac Address    Radio               Radio               Up/Off time   State
---------------------------------------- --------------- -------------- ------------------- ------------------- ------------- -----
AP740-I-newFlash                         172.30.103.147  00d0.f822.334c 1  E   0    1*  100 2  E   0  157*  100    0:00:16:48 Run   
WS5308#</msg>
<msg timestamp="20190527 22:00:42.739" level="INFO">${output} =  1
Offline AP number: 12

AP Name                                  IP Address      Mac Address    Radio               Radio               Up/Off time   State
--------------------------------------...</msg>
<status status="PASS" starttime="20190527 22:00:42.736" endtime="20190527 22:00:42.739"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*${AP_NAME}*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.740" endtime="20190527 22:00:42.741"></status>
</kw>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*Quit*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.742" endtime="20190527 22:00:42.743"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>co</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.744" endtime="20190527 22:00:42.744"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.745" endtime="20190527 22:00:42.745"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<msg timestamp="20190527 22:00:42.798" level="INFO">WS5308#</msg>
<status status="PASS" starttime="20190527 22:00:42.745" endtime="20190527 22:00:42.798"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>ap-config ${AP_MAC}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.799" endtime="20190527 22:00:42.800"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:42.800" endtime="20190527 22:00:42.801"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s ap</arg>
</arguments>
<msg timestamp="20190527 22:00:43.237" level="INFO">co
Enter configuration commands, one per line.  End with CNTL/Z.
WS5308(config)#</msg>
<status status="PASS" starttime="20190527 22:00:42.801" endtime="20190527 22:00:43.237"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD1}</arg>
</arguments>
<msg timestamp="20190527 22:00:43.238" level="INFO">ap-config 00d0.f822.334c</msg>
<status status="PASS" starttime="20190527 22:00:43.237" endtime="20190527 22:00:43.238"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD2}</arg>
</arguments>
<msg timestamp="20190527 22:00:43.239" level="INFO">You are going to config AP(AP740-I-newFlash), which is online now.</msg>
<status status="PASS" starttime="20190527 22:00:43.238" endtime="20190527 22:00:43.239"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD3}</arg>
</arguments>
<msg timestamp="20190527 22:00:43.264" level="INFO">WS5308(config-ap)#no spectral enable radio 1</msg>
<status status="PASS" starttime="20190527 22:00:43.239" endtime="20190527 22:00:43.264"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD4}</arg>
</arguments>
<msg timestamp="20190527 22:00:43.327" level="INFO">WS5308(config-ap)#no spectral enable radio 2</msg>
<status status="PASS" starttime="20190527 22:00:43.265" endtime="20190527 22:00:43.327"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:43.329" endtime="20190527 22:00:43.329"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:43.589" level="INFO">WS5308(config-ap)#no spectral enable radio 3
WS5308(config-ap)#no spectral enable
WS5308(config-ap)#
WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:43.590" level="INFO">${output} = WS5308(config-ap)#no spectral enable radio 3
WS5308(config-ap)#no spectral enable
WS5308(config-ap)#
WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:43.329" endtime="20190527 22:00:43.590"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190527 22:00:44.593" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20190527 22:00:43.592" endtime="20190527 22:00:44.593"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>${AC_TEST_CMD1}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:44.612" level="INFO">spectral enable radio 1</msg>
<msg timestamp="20190527 22:00:44.612" level="INFO">${output} = spectral enable radio 1
</msg>
<status status="PASS" starttime="20190527 22:00:44.594" endtime="20190527 22:00:44.612"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>${AC_TEST_CMD2}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:44.698" level="INFO">WS5308(config-ap)#spectral enable radio 2</msg>
<msg timestamp="20190527 22:00:44.698" level="INFO">${output} = WS5308(config-ap)#spectral enable radio 2
</msg>
<status status="PASS" starttime="20190527 22:00:44.614" endtime="20190527 22:00:44.698"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>${AC_TEST_CMD3}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:44.759" level="INFO">WS5308(config-ap)#spectral enable radio 3</msg>
<msg timestamp="20190527 22:00:44.760" level="INFO">${output} = WS5308(config-ap)#spectral enable radio 3
</msg>
<status status="PASS" starttime="20190527 22:00:44.699" endtime="20190527 22:00:44.760"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:44.953" level="INFO">WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:44.953" level="INFO">${output} = WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:44.760" endtime="20190527 22:00:44.953"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>show ap-config running ${AP_NAME}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:44.968" level="INFO">show ap-config running AP740-I-newFlash</msg>
<msg timestamp="20190527 22:00:45.463" level="INFO">Building configuration...
Current configuration: 161 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
 spectral enable radio 1
 spectral enable radio 2
 spectral enable radio 3
!
end
WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:45.463" level="INFO">${output} = 
Building configuration...
Current configuration: 161 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
 spectral enable radio 1
 spectral enable radio 2...</msg>
<status status="PASS" starttime="20190527 22:00:44.955" endtime="20190527 22:00:45.463"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.464" endtime="20190527 22:00:45.465"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*${AC_CHECK_RET1}*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.465" endtime="20190527 22:00:45.466"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*${AC_CHECK_RET2}*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.466" endtime="20190527 22:00:45.467"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*${AC_CHECK_RET3}*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.467" endtime="20190527 22:00:45.468"></status>
</kw>
<kw name="Open Connection" library="Telnet">
<doc>Opens a new Telnet connection to the given host and port.</doc>
<arguments>
<arg>host=${AP_IP}</arg>
<arg>port=${AP_PORT}</arg>
</arguments>
<msg timestamp="20190527 22:00:45.469" level="INFO">Opening connection to 172.30.103.147:23 with prompt: (&gt;|#|:)$ (regexp)</msg>
<status status="PASS" starttime="20190527 22:00:45.468" endtime="20190527 22:00:45.470"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${Password}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.471" endtime="20190527 22:00:45.471"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
<arg>Username:</arg>
<arg>Password:</arg>
</arguments>
<msg timestamp="20190527 22:00:45.683" level="INFO">User Access Verification

Password:</msg>
<status status="PASS" starttime="20190527 22:00:45.473" endtime="20190527 22:00:45.684"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${Password}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.687" endtime="20190527 22:00:45.689"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.691" endtime="20190527 22:00:45.692"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<msg timestamp="20190527 22:00:45.922" level="INFO">AP740-I-newFlash&gt;</msg>
<status status="PASS" starttime="20190527 22:00:45.694" endtime="20190527 22:00:45.922"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${Password_op}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.923" endtime="20190527 22:00:45.923"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${Password_op}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.924" endtime="20190527 22:00:45.924"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.925" endtime="20190527 22:00:45.925"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${Password1}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.925" endtime="20190527 22:00:45.926"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>${Password1}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.926" endtime="20190527 22:00:45.926"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:45.927" endtime="20190527 22:00:45.927"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<msg timestamp="20190527 22:00:46.142" level="INFO">en

Password:
AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:45.927" endtime="20190527 22:00:46.143"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>${AP_CHECK_CMD}</arg>
</arguments>
<msg timestamp="20190527 22:00:46.343" level="INFO">show running-config | i spectral</msg>
<status status="PASS" starttime="20190527 22:00:46.144" endtime="20190527 22:00:46.343"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
<arg>${AP_CHECK_RET1}</arg>
</arguments>
<msg timestamp="20190527 22:00:46.345" level="INFO">spectral
 spectral enable radio 1</msg>
<status status="PASS" starttime="20190527 22:00:46.344" endtime="20190527 22:00:46.345"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
<arg>${AP_CHECK_RET2}</arg>
</arguments>
<msg timestamp="20190527 22:00:46.346" level="INFO">spectral enable radio 2</msg>
<status status="PASS" starttime="20190527 22:00:46.346" endtime="20190527 22:00:46.346"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
<arg>${AP_CHECK_RET3}</arg>
</arguments>
<msg timestamp="20190527 22:00:46.347" level="INFO">spectral enable radio 3
AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:46.347" endtime="20190527 22:00:46.348"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190527 22:00:47.349" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20190527 22:00:46.349" endtime="20190527 22:00:47.349"></status>
</kw>
<kw name="Switch Connection" library="Telnet">
<doc>Switches between active connections using an index or an alias.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:47.350" endtime="20190527 22:00:47.350"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:47.351" endtime="20190527 22:00:47.351"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<msg timestamp="20190527 22:00:47.573" level="INFO">WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:47.352" endtime="20190527 22:00:47.573"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD1}</arg>
</arguments>
<msg timestamp="20190527 22:00:47.590" level="INFO">no spectral enable radio 1</msg>
<status status="PASS" starttime="20190527 22:00:47.574" endtime="20190527 22:00:47.590"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD2}</arg>
</arguments>
<msg timestamp="20190527 22:00:47.853" level="INFO">WS5308(config-ap)#no spectral enable radio 2</msg>
<status status="PASS" starttime="20190527 22:00:47.591" endtime="20190527 22:00:47.853"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>no ${AC_TEST_CMD3}</arg>
</arguments>
<msg timestamp="20190527 22:00:47.867" level="INFO">WS5308(config-ap)#no spectral enable radio 3</msg>
<status status="PASS" starttime="20190527 22:00:47.854" endtime="20190527 22:00:47.867"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>show ap-config running ${AP_NAME}</arg>
</arguments>
<msg timestamp="20190527 22:00:47.940" level="INFO">WS5308(config-ap)#show ap-config running AP740-I-newFlash</msg>
<status status="PASS" starttime="20190527 22:00:47.868" endtime="20190527 22:00:47.940"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:47.942" endtime="20190527 22:00:47.943"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:48.442" level="INFO">Building configuration...
Current configuration: 83 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
!
end
WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:48.442" level="INFO">${output} = 
Building configuration...
Current configuration: 83 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
!
end
WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:47.943" endtime="20190527 22:00:48.442"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:48.444" endtime="20190527 22:00:48.447"></status>
</kw>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*spectral enable*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:48.466" endtime="20190527 22:00:48.467"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${AC_CHECK_TMP}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:48.468" endtime="20190527 22:00:48.468"></status>
</kw>
<kw name="Switch Connection" library="Telnet">
<doc>Switches between active connections using an index or an alias.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:48.469" endtime="20190527 22:00:48.469"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:48.470" endtime="20190527 22:00:48.470"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<msg timestamp="20190527 22:00:48.680" level="INFO">AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:48.471" endtime="20190527 22:00:48.681"></status>
</kw>
<kw name="Write" library="Telnet">
<doc>Writes the given text plus a newline into the connection.</doc>
<arguments>
<arg>${AP_CHECK_CMD}</arg>
</arguments>
<msg timestamp="20190527 22:00:48.890" level="INFO">show running-config | i spectral</msg>
<status status="PASS" starttime="20190527 22:00:48.682" endtime="20190527 22:00:48.891"></status>
</kw>
<kw name="Read Until Regexp" library="Telnet">
<doc>Reads output until any of the ``expected`` regular expressions match.</doc>
<arguments>
<arg>(&gt;|#)</arg>
<arg>\\sRETURN\\s</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:48.893" level="INFO">spectral
AP740-I-newFlash#</msg>
<msg timestamp="20190527 22:00:48.893" level="INFO">${output} = spectral
AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:48.892" endtime="20190527 22:00:48.893"></status>
</kw>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*spectral enable*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:48.894" endtime="20190527 22:00:48.895"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190527 22:00:49.896" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20190527 22:00:48.896" endtime="20190527 22:00:49.897"></status>
</kw>
<status status="PASS" starttime="20190527 22:00:42.057" endtime="20190527 22:00:49.899" critical="yes"></status>
</test>
<test id="s1-t2" name="fss_auto_testï¼š(no) spectral enable">
<kw name="Switch Connection" library="Telnet">
<doc>Switches between active connections using an index or an alias.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:49.909" endtime="20190527 22:00:49.909"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:49.910" endtime="20190527 22:00:49.910"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<msg timestamp="20190527 22:00:49.910" level="INFO">WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:49.910" endtime="20190527 22:00:49.910"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>${AC_TEST_CMD4}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:50.131" level="INFO">WS5308(config-ap)#spectral enable
WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:50.131" level="INFO">${output} = WS5308(config-ap)#spectral enable
WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:49.911" endtime="20190527 22:00:50.131"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>show ap-config running ${AP_NAME}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:50.149" level="INFO">show ap-config running AP740-I-newFlash</msg>
<msg timestamp="20190527 22:00:50.638" level="INFO">Building configuration...
Current configuration: 101 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
 spectral enable
!
end
WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:50.638" level="INFO">${output} = 
Building configuration...
Current configuration: 101 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
 spectral enable
!
end
WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:50.132" endtime="20190527 22:00:50.638"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:50.639" endtime="20190527 22:00:50.640"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*${AC_CHECK_RET4}*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:50.644" endtime="20190527 22:00:50.644"></status>
</kw>
<kw name="Switch Connection" library="Telnet">
<doc>Switches between active connections using an index or an alias.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:50.644" endtime="20190527 22:00:50.644"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:50.645" endtime="20190527 22:00:50.645"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<msg timestamp="20190527 22:00:50.847" level="INFO">AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:50.645" endtime="20190527 22:00:50.847"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>${AP_CHECK_CMD}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:51.048" level="INFO">show running-config | i spectral</msg>
<msg timestamp="20190527 22:00:51.048" level="INFO">spectral
 spectral enable
AP740-I-newFlash#</msg>
<msg timestamp="20190527 22:00:51.048" level="INFO">${output} = spectral
 spectral enable
AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:50.848" endtime="20190527 22:00:51.048"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*spectral enable*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:51.049" endtime="20190527 22:00:51.049"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190527 22:00:52.052" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20190527 22:00:51.052" endtime="20190527 22:00:52.052"></status>
</kw>
<kw name="Switch Connection" library="Telnet">
<doc>Switches between active connections using an index or an alias.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:52.052" endtime="20190527 22:00:52.052"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:52.053" endtime="20190527 22:00:52.053"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<msg timestamp="20190527 22:00:52.272" level="INFO">WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:52.054" endtime="20190527 22:00:52.272"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>no ${AC_TEST_CMD4}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:52.287" level="INFO">no spectral enable</msg>
<msg timestamp="20190527 22:00:52.483" level="INFO">WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:52.483" level="INFO">${output} = WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:52.274" endtime="20190527 22:00:52.483"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:52.485" endtime="20190527 22:00:52.486"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>show ap-config running ${AP_NAME}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:52.509" level="INFO">show ap-config running AP740-I-newFlash</msg>
<msg timestamp="20190527 22:00:53.038" level="INFO">Building configuration...
Current configuration: 83 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
!
end
WS5308(config-ap)#</msg>
<msg timestamp="20190527 22:00:53.038" level="INFO">${output} = 
Building configuration...
Current configuration: 83 bytes

!
ap-config AP740-I-newFlash
 ap-mac 00d0.f822.334c
 wlan-cap enable 1
!
end
WS5308(config-ap)#</msg>
<status status="PASS" starttime="20190527 22:00:52.490" endtime="20190527 22:00:53.039"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:53.039" endtime="20190527 22:00:53.041"></status>
</kw>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*spectral enable*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:53.047" endtime="20190527 22:00:53.048"></status>
</kw>
<kw name="Switch Connection" library="Telnet">
<doc>Switches between active connections using an index or an alias.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:53.049" endtime="20190527 22:00:53.049"></status>
</kw>
<kw name="Write Bare" library="Telnet">
<doc>Writes the given text, and nothing else, into the connection.</doc>
<arguments>
<arg>\r\n</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:53.049" endtime="20190527 22:00:53.050"></status>
</kw>
<kw name="Read Until Prompt" library="Telnet">
<doc>Reads output until the prompt is encountered.</doc>
<msg timestamp="20190527 22:00:53.258" level="INFO">AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:53.050" endtime="20190527 22:00:53.258"></status>
</kw>
<kw name="Execute Command" library="Telnet">
<doc>Executes the given ``command`` and reads, logs, and returns everything until the prompt.</doc>
<arguments>
<arg>${AP_CHECK_CMD}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190527 22:00:53.264" level="INFO">show running-config | i spectral</msg>
<msg timestamp="20190527 22:00:53.468" level="INFO">spectral
AP740-I-newFlash#</msg>
<msg timestamp="20190527 22:00:53.468" level="INFO">${output} = spectral
AP740-I-newFlash#</msg>
<status status="PASS" starttime="20190527 22:00:53.260" endtime="20190527 22:00:53.469"></status>
</kw>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>${output}</arg>
<arg>*spectral enable*</arg>
</arguments>
<status status="PASS" starttime="20190527 22:00:53.471" endtime="20190527 22:00:53.472"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190527 22:00:54.474" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20190527 22:00:53.474" endtime="20190527 22:00:54.474"></status>
</kw>
<kw name="Close All Connections" library="Telnet" type="teardown">
<doc>Closes all open connections and empties the connection cache.</doc>
<status status="PASS" starttime="20190527 22:00:54.475" endtime="20190527 22:00:54.475"></status>
</kw>
<status status="PASS" starttime="20190527 22:00:49.905" endtime="20190527 22:00:54.476" critical="yes"></status>
</test>
<status status="PASS" starttime="20190527 22:00:41.996" endtime="20190527 22:00:54.478"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="0">Critical Tests</stat>
<stat pass="2" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="0" id="s1" name="Spectral Enable Radio">Spectral Enable Radio</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
